# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "builddir",
]

# Same as Black.
line-length = 88
indent-width = 4

target-version = "py310"

[lint]
select = [
    # Ruff defaults
    "E4", 
    "E7", 
    "E9", 
    "F", 
    # Ensure we're being smart when raising, returning or breaking
    "RET", 
    # Enforce pydocstyle
    "W", 
    # Enforce more formats
    # See https://docs.astral.sh/ruff/rules/#warning-w
    "D", 
    # Enforce pathlib when working with paths
    "PTH", 
    # Ensure exceptions are not blindly caught
    "BLE001", 
    # Enforce flake8 error messages
    "EM", 
    # Ensure we're being smart when working with archives/executing shell commands
    # Or when dealing with input returned from web services (e.g., Github)
    "S",
    # Ensure we do not exceed our line length
    "E501",
    # Enforce types for variables
    "ANN",
    # Ensure we're smart when accessing dicts
    "RUF019",
    # Enforce not concatenating collections
    "RUF005",
    # Flag unused qa directives
    "RUF100",
    # Enforce flake8 concat strings because the + operator can be unnecessary
    "ISC",
    # Ensure we're smart when using the logger
    # Specific log statements should execute only when necessary
    "G",
    # Prefer collapsing nested if-elif in the else branch
    "PLR5501",
    # Simply and catch redundant logic
    "SIM",
    # Ensure no useless arguments/paramaters
    "ARG",
    # Ensure explicit check= for subprocess.run to avoid silent failures
    "PLW1510",
    "UP",
    "FURB",
    # Enforce the encoding argument when opening files
    # Encoding for text should be utf-8
    "PLW1514"
]
ignore = [
    # Format
    "D100", 
    "D203",
    "D213",
    # Ignore untrusted input for subprocess
    # This raises false negatives and currently we shell out when:
    # Using Zenity or executing the final command
    # In the above cases, we *always* verify the existence of the command/files
    "S603",
    # We use a static location for the crash report dir: /tmp/umu_crashreports
    "S108",
    # Don't flag missing type for self
    # This will be deprecated in Ruff soon
    "ANN101",
    # Single line implicit concat conflicts with the formatter
    "ISC001",
    "S404"
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

logger-objects = ["umu_log.log"]

[lint.per-file-ignores]
"umu_test.py" = ["ANN"]
"umu_test_plugins.py" = ["ANN"]

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
